/*********************
*  OK Grids System   *
*  By PixelDima      *
**********************/
/**************
*  Variables  *
***************/
$columns: 12 !default;
$gutter: 30px !default;

/******************
* Container width *
*******************/
$ExtraLargeDevices: 1200px !default;
$LargeDevices: 1140px !default;
$MediumDevices: 970px !default;
$SmallDevices: 722px !default;

/**************
*  Breakpoint *
***************/
$screen-xld-min: 1600px !default;
$screen-ld-min: 1140px !default;
$screen-sd-max: 989px !default;
$screen-sd-min: 768px !default;
$screen-xsd-min: 480px !default;

/**************
*   [MIXINS]  *
***************/
/*  Get Container Width  */

@mixin columns($num: 1, $width: $MediumDevices) {
    $contentWidth: $width + 2 * $gutter;
    $single: ($width - $gutter * ($columns - 1)) / $columns;
    max-width: $single * $num + $gutter * ($num - 1);
}

/*  Get Column Width  */

@mixin flexWidth($col: 1, $width: $MediumDevices, $gutter: $gutter) {
    position: relative;
    width: 100% / ($columns / $col);
    padding: 0px ($gutter / 2);
    @include float_start;
}

/*  Get offset margin  */

@mixin offset($col: 1, $width: $MediumDevices) {
    @include margin-start(100% / ($columns / $col));
}

///
/// responsive
/// ELD :Extra Large devices Desktops 
/// LD  :Large devices Desktops 
/// MD  :Medium devices Desktops 
/// SD  :Small devices Tablets 
/// XSD :Extra small devices Phones 
///
@mixin hidden-on($size) {
    @if $size == "XLD" {
        .hidden-xld {
            display: none !important;
        }
        .hidden-ld, .hidden-md, .hidden-sd, .hidden-xsd {
            display: inherit;
        }
    }
    @if $size == "LD" {
        .hidden-ld {
            display: none !important;
        }
        .hidden-xld, .hidden-md, .hidden-sd, .hidden-xsd {
            display: inherit;
        }
    }
    @if $size == "MD" {
        .hidden-md {
            display: none !important;
        }
        .hidden-ld, .hidden-xld, .hidden-sd, .hidden-xsd {
            display: inherit;
        }
    }
    @if $size == "SD" {
        .hidden-sd {
            display: none !important;
        }
        .hidden-ld, .hidden-md, .hidden-xld, .hidden-xsd {
            display: inherit;
        }
    }
    @if $size == "XSD" {
        .hidden-xsd {
            display: none !important;
        }
        .hidden-ld, .hidden-md, .hidden-sd, .hidden-xld {
            display: inherit;
        }
    }
}

@mixin visible-on($size) {
    @if $size == "XLD" {
        .visible-xld {
            display: inherit !important;
        }
        .visible-ld, .visible-md, .visible-sd, .visible-xsd {
            display: none;
        }
    }
    @if $size == "LD" {
        .visible-ld {
            display: inherit !important;
        }
        .visible-xld, .visible-md, .visible-sd, .visible-xsd {
            display: none;
        }
    }
    @if $size == "MD" {
        .visible-md {
            display: inherit !important;
        }
        .visible-ld, .visible-xld, .visible-sd, .visible-xsd {
            display: none;
        }
    }
    @if $size == "SD" {
        .visible-sd {
            display: inherit !important;
        }
        .visible-ld, .visible-md, .visible-xld, .visible-xsd {
            display: none;
        }
    }
    @if $size == "XSD" {
        .visible-xsd {
            display: inherit !important;
        }
        .visible-ld, .visible-md, .visible-sd, .visible-xld {
            display: none;
        }
    }
}

@include visible-on("MD");

@include hidden-on("MD");

.boxed {
    margin: 0 auto;
    overflow: visible;
}

/*Columns Loop*/
/*  One Row  */

.ok-row {
    position: relative;
    margin: 0 (-1 * $gutter / 2);
    clear: both;
    .ok-row {
        margin-bottom: 0;
    }
    &.no-margin {
        margin: 0 0;
        > [class*="ok-"] {
            padding: 0 0;
        }
    }
    &:before, &:after {
        display: table;
        content: "";
        line-height: 0;
    }
    &:after {
        clear: both;
    }
}

/*Medium devices 960 and up */

.container {
    position: relative;
    @include columns($columns, $MediumDevices);
    margin: 0 auto;
    clear: both;
}

.boxed {
    max-width: $MediumDevices;
    width: 90%;
    .container {
        width: 95%;
    }
}

$i: $columns;

@while $i > 0 {
    div .ok-md-#{$i} {
        @include flexWidth($i, $MediumDevices, $gutter);
    }
    $i: $i - 1;
}

$i: $columns;

@while $i > 0 {
    div .ok-offset-md-#{$i} {
        @include offset($i, $MediumDevices);
    }
    $i: $i - 1;
}

div .no-md-offset {
    @include margin-start(0);
}

/*(xsd) */

@media only screen and (max-width: $screen-xsd-min) {
    @include visible-on("XSD");
    @include hidden-on("XSD");
    .boxed {
        width: 100%;
    }
    .container {
        width: 90%;
    }
    div [class*="ok-"] {
        width: 100% !important;
        padding: 0; //!important issues with .dima-padding
        margin-bottom: $gutter;
    }
    div .ok-row {
        margin: 0;
        margin-bottom: 0;
    }
    div [class*="ok-offset-"] {
        @include margin-start(0);
    }
}

@media only screen and (max-width: $screen-sd-min) {
    @include visible-on("XSD");
    @include hidden-on("XSD");
    body.boxed {
        width: 100%;
        margin-top: 0px;
        margin-bottom: 0px;
    }
    .container {
        width: 90%;
    }
    $i: $columns;
    $list-columns: $columns / 3, $columns / 2, $columns;
    @each $item in $list-columns {
        div .ok-xsd-#{$item} {
            @include flexWidth($item, $SmallDevices, $gutter);
            //$gutter
       
        }
        @if $item > 0 {
            div .ok-offset-xsd-#{$item} {
                @include offset($item, $SmallDevices);
            }
        }
    }
    div .no-xsd-offset {
        @include margin-start(0);
    }
}

/*(sd) Tablet Grid  [768px,989px[ */

@media only screen and (min-width: $screen-sd-min) and (max-width: $screen-sd-max) {
    @include visible-on("SD");
    @include hidden-on("SD");
    body.boxed {
        width: 100%;
        margin-top: 0px;
        margin-bottom: 0px;
    }
    .container {
        width: 90%;
    }
    $i: $columns;
    @while $i > 0 {
        div .ok-sd-#{$i} {
            @include flexWidth($i, $SmallDevices, $gutter);
        }
        @if $i > 0 {
            div .ok-offset-sd-#{$i} {
                @include offset($i, $SmallDevices);
            }
        }
        $i: $i - 1;
    }
    div .no-sd-offset {
        @include margin-start(0);
    }
}

/*(ld) Desktop Large Grid 1140px and up*/

@media only screen and (min-width: $screen-ld-min) {
    @include visible-on("LD");
    @include hidden-on("LD");
    .boxed {
        max-width: $LargeDevices;
        width: 90%;
    }
    .container {
        @include columns($columns, $LargeDevices);
    }
    $i: $columns;
    @while $i > 0 {
        div .ok-ld-#{$i} {
            @include flexWidth($i, $LargeDevices, $gutter);
        }
        @if $i > 0 {
            div .ok-offset-ld-#{$i} {
                @include offset($i, $LargeDevices);
            }
        }
        $i: $i - 1;
    }
    div .no-ld-offset {
        @include margin-start(0);
    }
}

/*(xld) Desktop Extra Large Grid 1600px and up*/

@media only screen and (min-width: $screen-xld-min) {
    @include visible-on("XLD");
    @include hidden-on("XLD");
    .boxed {
        max-width: $ExtraLargeDevices;
        width: 90%;
    }
    .container {
        @include columns($columns, $ExtraLargeDevices);
    }
    $i: $columns;
    @while $i > 0 {
        div .ok-xld-#{$i} {
            @include flexWidth($i, $ExtraLargeDevices, $gutter);
        }
        @if $i > 0 {
            div .ok-offset-xld-#{$i} {
                @include offset($i, $ExtraLargeDevices);
            }
        }
        $i: $i - 1;
    }
    div .no-xld-offset {
        @include margin-start(0);
    }
}

div .ok-row {
    &.row-margin-bottom {
        [class*="ok-"] {
            margin-bottom: 30px;
        }
    }
}